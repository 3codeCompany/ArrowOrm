<?php

declare(strict_types=1);

use Arrow\ORM\DB\Connectors\ArrayDBInterface;
use Arrow\ORM\DB\DBManager;
use Arrow\ORM\DB\DBRepository;
use Arrow\ORM\Schema\SchemaReader;
use ORM\Tests\Objects\User;
use PHPUnit\Framework\TestCase;

final class ArrayDbInterfaceTest extends TestCase
{

    protected function getDataSet()
    {
        return
            [
                'guestbook' => [
                    [
                        'id' => 1,
                        'content' => 'Hello buddy!',
                        'user' => 'joe',
                        'created' => '2010-04-24 17:15:23'
                    ],
                    [
                        'id' => 2,
                        'content' => 'I like it!',
                        'user' => null,
                        'created' => '2010-04-26 12:14:20'
                    ],
                ],
            ];
    }

    public static function setUpBeforeClass()/* The :void return type declaration that should be here would cause a BC issue */
    {
        \Arrow\ORM\Loader::registerAutoload();
        parent::setUpBeforeClass(); // TODO: Change the autogenerated stub
    }


    /**
     * @param string $name
     * @return DbRepository
     */
    private function initRepository($name = "array", &$repo = null)
    {
        $arrayRepository = new DBRepository(
            new ArrayDBInterface([]),
            __DIR__ . "/assets/generated",
            function () {
                return (new SchemaReader())->readSchemaFromFile([
                    __DIR__ . "/assets/schema/schema.xml"
                ]);
            }
        );

        $arrayRepository->synchronize();
        DBManager::addRepository($name, $arrayRepository);
        DBManager::setDefaultRepository($name);
        return DBManager::getRepository($name);
    }

    public function testCanSingleBeInitiated(): void
    {
        $this->initRepository();
        $this->assertInstanceOf(DBRepository::class, DBManager::getRepository("array"));
    }

    public function testCanParallelBeInitiated(): void
    {
        $this->initRepository('repo1');
        $this->initRepository('repo2');

        $this->assertInstanceOf(DBRepository::class, DBManager::getRepository("repo1"));
        $this->assertInstanceOf(DBRepository::class, DBManager::getRepository("repo2"));

    }

    public function testCanObjectCanBeInserted()
    {

        $repo = $this->initRepository('repo1');

        $user = User::create([
            User::F_LOGIN => "test",
            User::F_EMAIL => "test@test.com",
        ]);

        $user->save();

        $db = $repo->getConnectionInterface()->getDB();

        $this->assertEquals(["users" => [0 => ["id" => 0, "login" => "test", "email" => "test@test.com"]]], $db);


    }


}
